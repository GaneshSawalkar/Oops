package com.bridgelabz.felloship.source;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import com.bridgelabz.felloship.utility.Utility;

public class test {

	static Scanner sc = new Scanner(System.in);
	static List<Person> book;
	public static String spath;

	public static void selectaction() throws IOException {

		int choice;
		do {
			System.out.println("****File operations :*****");
			System.out.println("1: New User\n" + "2: Update User\n" + "3: Delete User\n" + "4: Search User\n"
					+ "5: Display sorted Book\n" + "6: Back\n" + "7:Exit\n");

			System.out.print("select choice :");
			choice = sc.nextInt();
			switch (choice) {
			case 1:
				// add new person entry
				AddNewPerson();
				break;
			case 2:
				// update person info
				updatefile();
				break;
			case 3:
				// delete person info
				deletePerson();
				break;
			case 4:
				// show person info
				read();

				break;
			case 5:
				// display list ascending order
				SortbyName();

				break;
			case 6: // get user info

				AddressBook.action();
				return;
			case 7:
				return;
			default:
				break;
			}

		} while (choice != 7);

	}

	public static void AddNewPerson() throws IOException {

		book = check.readbook(spath);

		Person newperson = new Person();

		System.out.print("enter user firstName: ");
		newperson.setFirstName(sc.next());

		System.out.print("enter user lastName: ");
		newperson.setFirstName(sc.next());

		System.out.print("enter user address: ");
		sc.nextLine();
		newperson.setFirstName(sc.next());

		System.out.print("enter state , city , zip code : ");
		newperson.setFirstName(sc.next());
		newperson.setFirstName(sc.next());
		newperson.setFirstName(sc.next());

		System.out.print("enter the phone number: ");
		newperson.setFirstName(sc.next());

		book.add(newperson);
		System.out.println("Saved Contact Successfully....");
		check.writebook(book);
		selectaction();
	}

	public static void getPersonDetails(Person person22) {
		System.out.println(" FirstName : " + person22.FirstName + "\n LastName  : " + person22.LastName
				+ "\n Address   : " + person22.Address + "\n State     : " + person22.State + "\n City      : "
				+ person22.City + "\n Zip-code  : " + person22.zipcode + "\n Contact   : " + person22.phone);
	}

	public static void updatefile() {
		System.out.println("enter first name for search");
		String inputstring = sc.next();

		book = check.readbook(spath);

		boolean find = false;

		for (Person existingPerson : book) {
			if (existingPerson.FirstName.equals(inputstring)) {
				find = true;
				Selecteditmenu(existingPerson);

			}
		}

		if (!find) {
			System.out.println("contact not found!...");
		}
		System.out.println("1: Save\n 2: Save As");
		int ch = sc.nextInt();
		switch (ch) {
		case 1:
			check.writebook(book);
			System.out.println("Save changes..");
			break;
		case 2:
			Utility.saveAs(book);
			
			break;
		default:
			System.out.println("invalid choice");
			break;
		}

	}

	private static void Selecteditmenu(Person existingPerson) {
		System.out.println(
				"1: Lastname\n" + "2: Address \n" + "3: State\n" + "4: City\n" + "5: Zipcode\n" + "6: Contact\n");
		int choice = sc.nextInt();
		do{
			switch (choice) {
		case 1:
			System.out.println("new lastname");
			existingPerson.setAddress(sc.next());

			break;
		case 2:
			System.out.print("New Address : ");
			existingPerson.setAddress(sc.next());

			break;
		case 3:
			System.out.println("new state");
			existingPerson.setState(sc.next());
			break;
		case 4:
			System.out.println("new city");
			existingPerson.setCity(sc.next());
			break;
		case 5:
			System.out.println("new zipcode");
			existingPerson.setZipcode(sc.next());
			break;
		case 6:
			System.out.println("new phone");
			existingPerson.setPhone(sc.next());
			break;
		case 7:
			System.out.println("invalid selection");
			Selecteditmenu(existingPerson);
			break;
		default:
			break;
		}
		}while(choice!=7);

	}

	public static void SortbyName() {

		ArrayList<Person> displaylist = check.readbook(spath);

		ArrayList<String> sort = new ArrayList<String>();

		for (Person person2 : displaylist) {
			sort.add(person2.FirstName);
		}
		Collections.sort(sort);
		for (int i = 0; i < displaylist.size(); i++) {
			for (Person person2 : displaylist) {
				if (sort.get(i).equals(person2.FirstName)) {
					System.out.println();
					System.out.println("*********************" + (i + 1) + "************************");
					System.out.println();

					getPersonDetails(person2);
				}
			}
		}
	}

	public static void displaybook() {
		System.out.println("***********Book**************");
		book = check.readbook(spath);
		for (Person person2 : book) {
			getPersonDetails(person2);
		}

	}

	public static void deletePerson() {

		List<Person> deletelist = check.readbook(spath);

		System.out.println("enput person fname");
		String fname = sc.next();

		for (Person person : book) {
			if (fname.equals(person.FirstName)) {
				deletelist.remove(person);
			}

		}
		check.writebook(deletelist);
	}

	public static void read() {

		System.out.println("Reading JSON from a file");
		System.out.println("----------------------------");

		System.out.println("enter first name for search");
		String inputstring = sc.next();

		book = check.readbook(spath);

		boolean find = false;

		for (Person person22 : book) {
			if (person22.FirstName.equals(inputstring)) {
				find = true;

				getPersonDetails(person22);
			}
		}

		if (!find) {
			System.out.println("contact not found!...");
		}

	}

}
