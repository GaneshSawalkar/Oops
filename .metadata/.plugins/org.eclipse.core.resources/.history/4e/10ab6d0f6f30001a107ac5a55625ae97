package com.bridgelabz.felloship.main;

import java.io.IOException;
import java.util.List;
import java.util.Scanner;

import com.bridgelabz.felloship.control.StockControl;
import com.bridgelabz.felloship.model.StockUser;
import com.bridgelabz.felloship.model.stockmodel;
import com.bridgelabz.felloship.operation.StockOperations;
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

public class StockAccount {
	static Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		try {
			usermenu();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void usermenu() throws JsonParseException, JsonMappingException, IOException {
		System.out.println("1-Add user\n" + "2-remove user\n" + "3-buy share\n" + "4-sell share\n" + "5-dispaly stock\n"
				+ "6-log");
		int key = sc.nextInt();
		do {
			switch (key) {
			case 1:
				addusers();

				break;
			case 2:
				removeuser();
				break;
			case 3:
				buy();

				break;
			case 4:
				sell();

				break;
			case 5:
				StockOperations.Displaystock();
				break;
			case 6:
				// printReports();
				break;

			default:
				break;
			}
		} while (key != 7);
	}

	public static void removeuser() throws JsonGenerationException, JsonMappingException, IOException {

		List<StockUser> user = StockControl.readusers();
		System.out.println("enput user name");
		String inputusername = sc.next();
		for (StockUser stockUser : user) {
			if (stockUser.getUsername().equals(inputusername)) {
				user.remove(stockUser);
				break;
			}
		}
		StockControl.writeusers(user);

	}

	public static void addusers() throws JsonGenerationException, JsonMappingException, IOException {

		List<StockUser> newuser = StockControl.readusers();
		for (StockUser stockUser : newuser) {
			newuser.add(stockUser);
		}
		StockUser newentry = new StockUser();

		System.out.println("enter user name");
		newentry.setUsername(sc.next());
		newuser.add(newentry);
		StockControl.writeusers(newuser);
	}

	public static void sell() throws JsonGenerationException, JsonMappingException, IOException {

		StockOperations.Displaystock();
		System.out.println("username");
		String username = sc.next();
		List<StockUser> user = StockControl.readusers();
		for (StockUser stockUser : user) {
			if (stockUser.getUsername().equals(username)) {
				System.out.println("enter company symbol");
				String inputsymbol = sc.next();
				List<stockmodel> list = StockControl.readStock(spath);
				for (stockmodel stockmodel : list) {
					if (stockmodel.companysimbol.equals(inputsymbol)) {
						System.out.println("enter share amount");
						int shares = sc.nextInt();
						System.out.println("your shares is : " + shares + "\n per share price: " + stockmodel.shareprice
								+ "\ntotl price is: " + shares * stockmodel.shareprice);
						stockmodel.setCompanyavailableshare(stockmodel.companyavailableshare + shares);
					}
				}
				StockControl.writeStock(list);

			}
		}
	}

	public static void buy() throws JsonGenerationException, JsonMappingException, IOException {

		StockOperations.Displaystock();
		System.out.println("user name");
		String username = sc.next();
		List<StockUser> user = StockControl.readusers();
		for (StockUser stockUser : user) {
			if (stockUser.getUsername().equals(username)) {
				System.out.println("enter company symbol");
				String inputsymbol = sc.next();
				List<stockmodel> list = StockControl.readStock(spath);
				for (stockmodel stockmodel : list) {
					if (stockmodel.companysimbol.equals(inputsymbol)) {
						System.out.println("welcome to " + stockmodel.companyname);
						System.out.println("availabe Share is: " + stockmodel.companyavailableshare);
						System.out.println("price per share is: " + stockmodel.shareprice);

						System.out.println("no. of share you want?");
						int getshare = sc.nextInt();

						System.out
								.println("your " + getshare + " share of price is " + getshare * stockmodel.shareprice);
						stockmodel.setCompanyavailableshare(stockmodel.companyavailableshare - getshare);

					}
				}
				StockControl.writeStock(list);

			} else {
				System.out.println("your are not authorised user\nplease register your self....");
			}
		}

	}

}
